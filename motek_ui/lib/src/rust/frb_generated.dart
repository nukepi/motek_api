// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/endpoint.dart';
import 'api_handlers/attachments.dart';
import 'api_handlers/auth.dart';
import 'api_handlers/note_settings.dart';
import 'api_handlers/notebooks.dart';
import 'api_handlers/notes.dart';
import 'api_handlers/reminders.dart';
import 'api_handlers/shared_notes.dart';
import 'api_handlers/user_settings.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiEndpointInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -5557287;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_motek_ui',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<CheckApiResult> crateApiEndpointCheckApiConnection();

  Future<void> crateApiEndpointConfigureLogging({
    required String logDir,
    required String logFilePrefix,
  });

  Future<Attachment?> crateApiEndpointCreateAttachment({
    required String noteId,
    required String filename,
    required String url,
  });

  Future<Note?> crateApiEndpointCreateNote({
    required String title,
    required String content,
  });

  Future<NoteSettings?> crateApiEndpointCreateNoteSettings({
    required String noteId,
    required String color,
    required String font,
    required String viewMode,
  });

  Future<Notebook?> crateApiEndpointCreateNotebook({
    required String name,
    String? parentId,
  });

  Future<Reminder?> crateApiEndpointCreateReminder({
    required String noteId,
    required PlatformInt64 remindAt,
  });

  Future<SharedNote?> crateApiEndpointCreateSharedNote({
    required String noteId,
    required String userId,
    required String role,
  });

  Future<UserSettings?> crateApiEndpointCreateUserSettings({
    required String userId,
    required String lang,
    required String theme,
    required String timezone,
    required bool notificationsEnabled,
    required String defaultSort,
    required String editorMode,
  });

  Future<bool> crateApiEndpointDeleteAttachment({required String attachmentId});

  Future<bool> crateApiEndpointDeleteNote({required String noteId});

  Future<bool> crateApiEndpointDeleteNoteSettings({required String settingsId});

  Future<bool> crateApiEndpointDeleteNotebook({required String notebookId});

  Future<bool> crateApiEndpointDeleteReminder({required String reminderId});

  Future<bool> crateApiEndpointDeleteSharedNote({
    required String noteId,
    required String userId,
  });

  Future<bool> crateApiEndpointDeleteUserSettings({required String settingsId});

  Future<String> crateApiEndpointGetApiUrl();

  Future<Attachment?> crateApiEndpointGetAttachment({
    required String attachmentId,
  });

  Future<String?> crateApiEndpointGetLoggedInEmail();

  Future<String?> crateApiEndpointGetLoggedInUserId();

  Future<String> crateApiEndpointGetLogs({String? logFilePath});

  Future<Note?> crateApiEndpointGetNote({required String noteId});

  Future<NoteSettings?> crateApiEndpointGetNoteSettings({
    required String settingsId,
  });

  Future<Notebook?> crateApiEndpointGetNotebook({required String notebookId});

  Future<Reminder?> crateApiEndpointGetReminder({required String reminderId});

  Future<SharedNote?> crateApiEndpointGetSharedNote({
    required String noteId,
    required String userId,
  });

  Future<UserSettings?> crateApiEndpointGetUserSettings({
    required String userId,
  });

  Future<void> crateApiEndpointInitApp();

  Future<bool> crateApiEndpointIsUserLoggedIn();

  Future<List<Attachment>> crateApiEndpointListAttachments();

  Future<List<NoteSettings>> crateApiEndpointListNoteSettings({
    required String userId,
  });

  Future<List<Notebook>> crateApiEndpointListNotebooks();

  Future<List<Note>> crateApiEndpointListNotes();

  Future<List<Reminder>> crateApiEndpointListReminders({
    required String userId,
  });

  Future<List<SharedNote>> crateApiEndpointListSharedNotes({
    required String userId,
  });

  Future<AuthResponse> crateApiEndpointLogin({
    required String email,
    required String password,
  });

  Future<bool> crateApiEndpointLogoutUser();

  Future<bool> crateApiEndpointRefreshTokens();

  Future<AuthResponse> crateApiEndpointRegister({
    required String email,
    required String password,
  });

  Future<bool> crateApiEndpointSetApiUrl({required String url});

  Future<void> crateApiEndpointSetFlutterLogCallback({
    required FnLevelStringMessageString callback,
  });

  Future<void> crateApiEndpointSetupLoggingBridge({
    required String logLevel,
    String? logFilePath,
  });

  Future<void> crateApiEndpointTestRustLogging();

  Future<Attachment?> crateApiEndpointUpdateAttachment({
    required String attachmentId,
    String? filename,
    String? url,
  });

  Future<Note?> crateApiEndpointUpdateNote({
    required String noteId,
    String? title,
    String? content,
  });

  Future<NoteSettings?> crateApiEndpointUpdateNoteSettings({
    required String settingsId,
    String? color,
    String? font,
    String? viewMode,
  });

  Future<Notebook?> crateApiEndpointUpdateNotebook({
    required String notebookId,
    String? name,
    String? parentId,
  });

  Future<Reminder?> crateApiEndpointUpdateReminder({
    required String reminderId,
    bool? isDone,
    PlatformInt64? remindAt,
  });

  Future<SharedNote?> crateApiEndpointUpdateSharedNote({
    required String noteId,
    required String userId,
    required String role,
  });

  Future<UserSettings?> crateApiEndpointUpdateUserSettings({
    required String settingsId,
    String? lang,
    String? theme,
    String? timezone,
    bool? notificationsEnabled,
    String? defaultSort,
    String? editorMode,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FnLevelStringMessageString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FnLevelStringMessageString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FnLevelStringMessageStringPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<CheckApiResult> crateApiEndpointCheckApiConnection() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_check_api_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCheckApiConnectionConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCheckApiConnectionConstMeta =>
      const TaskConstMeta(debugName: "check_api_connection", argNames: []);

  @override
  Future<void> crateApiEndpointConfigureLogging({
    required String logDir,
    required String logFilePrefix,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(logDir, serializer);
          sse_encode_String(logFilePrefix, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointConfigureLoggingConstMeta,
        argValues: [logDir, logFilePrefix],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointConfigureLoggingConstMeta =>
      const TaskConstMeta(
        debugName: "configure_logging",
        argNames: ["logDir", "logFilePrefix"],
      );

  @override
  Future<Attachment?> crateApiEndpointCreateAttachment({
    required String noteId,
    required String filename,
    required String url,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(filename, serializer);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_attachment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateAttachmentConstMeta,
        argValues: [noteId, filename, url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "create_attachment",
        argNames: ["noteId", "filename", "url"],
      );

  @override
  Future<Note?> crateApiEndpointCreateNote({
    required String title,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(title, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateNoteConstMeta,
        argValues: [title, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateNoteConstMeta => const TaskConstMeta(
    debugName: "create_note",
    argNames: ["title", "content"],
  );

  @override
  Future<NoteSettings?> crateApiEndpointCreateNoteSettings({
    required String noteId,
    required String color,
    required String font,
    required String viewMode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(color, serializer);
          sse_encode_String(font, serializer);
          sse_encode_String(viewMode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateNoteSettingsConstMeta,
        argValues: [noteId, color, font, viewMode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateNoteSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "create_note_settings",
        argNames: ["noteId", "color", "font", "viewMode"],
      );

  @override
  Future<Notebook?> crateApiEndpointCreateNotebook({
    required String name,
    String? parentId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_opt_String(parentId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_notebook,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateNotebookConstMeta,
        argValues: [name, parentId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateNotebookConstMeta =>
      const TaskConstMeta(
        debugName: "create_notebook",
        argNames: ["name", "parentId"],
      );

  @override
  Future<Reminder?> crateApiEndpointCreateReminder({
    required String noteId,
    required PlatformInt64 remindAt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_i_64(remindAt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_reminder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateReminderConstMeta,
        argValues: [noteId, remindAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateReminderConstMeta =>
      const TaskConstMeta(
        debugName: "create_reminder",
        argNames: ["noteId", "remindAt"],
      );

  @override
  Future<SharedNote?> crateApiEndpointCreateSharedNote({
    required String noteId,
    required String userId,
    required String role,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(userId, serializer);
          sse_encode_String(role, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_shared_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateSharedNoteConstMeta,
        argValues: [noteId, userId, role],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateSharedNoteConstMeta =>
      const TaskConstMeta(
        debugName: "create_shared_note",
        argNames: ["noteId", "userId", "role"],
      );

  @override
  Future<UserSettings?> crateApiEndpointCreateUserSettings({
    required String userId,
    required String lang,
    required String theme,
    required String timezone,
    required bool notificationsEnabled,
    required String defaultSort,
    required String editorMode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(userId, serializer);
          sse_encode_String(lang, serializer);
          sse_encode_String(theme, serializer);
          sse_encode_String(timezone, serializer);
          sse_encode_bool(notificationsEnabled, serializer);
          sse_encode_String(defaultSort, serializer);
          sse_encode_String(editorMode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_user_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointCreateUserSettingsConstMeta,
        argValues: [
          userId,
          lang,
          theme,
          timezone,
          notificationsEnabled,
          defaultSort,
          editorMode,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointCreateUserSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "create_user_settings",
        argNames: [
          "userId",
          "lang",
          "theme",
          "timezone",
          "notificationsEnabled",
          "defaultSort",
          "editorMode",
        ],
      );

  @override
  Future<bool> crateApiEndpointDeleteAttachment({
    required String attachmentId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(attachmentId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteAttachmentConstMeta,
        argValues: [attachmentId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "delete_attachment",
        argNames: ["attachmentId"],
      );

  @override
  Future<bool> crateApiEndpointDeleteNote({required String noteId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteNoteConstMeta,
        argValues: [noteId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteNoteConstMeta =>
      const TaskConstMeta(debugName: "delete_note", argNames: ["noteId"]);

  @override
  Future<bool> crateApiEndpointDeleteNoteSettings({
    required String settingsId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(settingsId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteNoteSettingsConstMeta,
        argValues: [settingsId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteNoteSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "delete_note_settings",
        argNames: ["settingsId"],
      );

  @override
  Future<bool> crateApiEndpointDeleteNotebook({required String notebookId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notebookId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteNotebookConstMeta,
        argValues: [notebookId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteNotebookConstMeta =>
      const TaskConstMeta(
        debugName: "delete_notebook",
        argNames: ["notebookId"],
      );

  @override
  Future<bool> crateApiEndpointDeleteReminder({required String reminderId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(reminderId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteReminderConstMeta,
        argValues: [reminderId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteReminderConstMeta =>
      const TaskConstMeta(
        debugName: "delete_reminder",
        argNames: ["reminderId"],
      );

  @override
  Future<bool> crateApiEndpointDeleteSharedNote({
    required String noteId,
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteSharedNoteConstMeta,
        argValues: [noteId, userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteSharedNoteConstMeta =>
      const TaskConstMeta(
        debugName: "delete_shared_note",
        argNames: ["noteId", "userId"],
      );

  @override
  Future<bool> crateApiEndpointDeleteUserSettings({
    required String settingsId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(settingsId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointDeleteUserSettingsConstMeta,
        argValues: [settingsId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointDeleteUserSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "delete_user_settings",
        argNames: ["settingsId"],
      );

  @override
  Future<String> crateApiEndpointGetApiUrl() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetApiUrlConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetApiUrlConstMeta =>
      const TaskConstMeta(debugName: "get_api_url", argNames: []);

  @override
  Future<Attachment?> crateApiEndpointGetAttachment({
    required String attachmentId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(attachmentId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_attachment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetAttachmentConstMeta,
        argValues: [attachmentId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "get_attachment",
        argNames: ["attachmentId"],
      );

  @override
  Future<String?> crateApiEndpointGetLoggedInEmail() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetLoggedInEmailConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetLoggedInEmailConstMeta =>
      const TaskConstMeta(debugName: "get_logged_in_email", argNames: []);

  @override
  Future<String?> crateApiEndpointGetLoggedInUserId() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetLoggedInUserIdConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetLoggedInUserIdConstMeta =>
      const TaskConstMeta(debugName: "get_logged_in_user_id", argNames: []);

  @override
  Future<String> crateApiEndpointGetLogs({String? logFilePath}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(logFilePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetLogsConstMeta,
        argValues: [logFilePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetLogsConstMeta =>
      const TaskConstMeta(debugName: "get_logs", argNames: ["logFilePath"]);

  @override
  Future<Note?> crateApiEndpointGetNote({required String noteId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetNoteConstMeta,
        argValues: [noteId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetNoteConstMeta =>
      const TaskConstMeta(debugName: "get_note", argNames: ["noteId"]);

  @override
  Future<NoteSettings?> crateApiEndpointGetNoteSettings({
    required String settingsId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(settingsId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetNoteSettingsConstMeta,
        argValues: [settingsId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetNoteSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "get_note_settings",
        argNames: ["settingsId"],
      );

  @override
  Future<Notebook?> crateApiEndpointGetNotebook({required String notebookId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notebookId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_notebook,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetNotebookConstMeta,
        argValues: [notebookId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetNotebookConstMeta =>
      const TaskConstMeta(debugName: "get_notebook", argNames: ["notebookId"]);

  @override
  Future<Reminder?> crateApiEndpointGetReminder({required String reminderId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(reminderId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_reminder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetReminderConstMeta,
        argValues: [reminderId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetReminderConstMeta =>
      const TaskConstMeta(debugName: "get_reminder", argNames: ["reminderId"]);

  @override
  Future<SharedNote?> crateApiEndpointGetSharedNote({
    required String noteId,
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_shared_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetSharedNoteConstMeta,
        argValues: [noteId, userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetSharedNoteConstMeta =>
      const TaskConstMeta(
        debugName: "get_shared_note",
        argNames: ["noteId", "userId"],
      );

  @override
  Future<UserSettings?> crateApiEndpointGetUserSettings({
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_user_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointGetUserSettingsConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointGetUserSettingsConstMeta =>
      const TaskConstMeta(debugName: "get_user_settings", argNames: ["userId"]);

  @override
  Future<void> crateApiEndpointInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<bool> crateApiEndpointIsUserLoggedIn() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointIsUserLoggedInConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointIsUserLoggedInConstMeta =>
      const TaskConstMeta(debugName: "is_user_logged_in", argNames: []);

  @override
  Future<List<Attachment>> crateApiEndpointListAttachments() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_attachment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListAttachmentsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListAttachmentsConstMeta =>
      const TaskConstMeta(debugName: "list_attachments", argNames: []);

  @override
  Future<List<NoteSettings>> crateApiEndpointListNoteSettings({
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_note_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListNoteSettingsConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListNoteSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "list_note_settings",
        argNames: ["userId"],
      );

  @override
  Future<List<Notebook>> crateApiEndpointListNotebooks() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_notebook,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListNotebooksConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListNotebooksConstMeta =>
      const TaskConstMeta(debugName: "list_notebooks", argNames: []);

  @override
  Future<List<Note>> crateApiEndpointListNotes() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListNotesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListNotesConstMeta =>
      const TaskConstMeta(debugName: "list_notes", argNames: []);

  @override
  Future<List<Reminder>> crateApiEndpointListReminders({
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_reminder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListRemindersConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListRemindersConstMeta =>
      const TaskConstMeta(debugName: "list_reminders", argNames: ["userId"]);

  @override
  Future<List<SharedNote>> crateApiEndpointListSharedNotes({
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_shared_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointListSharedNotesConstMeta,
        argValues: [userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointListSharedNotesConstMeta =>
      const TaskConstMeta(debugName: "list_shared_notes", argNames: ["userId"]);

  @override
  Future<AuthResponse> crateApiEndpointLogin({
    required String email,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(email, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_auth_response,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointLoginConstMeta,
        argValues: [email, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointLoginConstMeta =>
      const TaskConstMeta(debugName: "login", argNames: ["email", "password"]);

  @override
  Future<bool> crateApiEndpointLogoutUser() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointLogoutUserConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointLogoutUserConstMeta =>
      const TaskConstMeta(debugName: "logout_user", argNames: []);

  @override
  Future<bool> crateApiEndpointRefreshTokens() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointRefreshTokensConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointRefreshTokensConstMeta =>
      const TaskConstMeta(debugName: "refresh_tokens", argNames: []);

  @override
  Future<AuthResponse> crateApiEndpointRegister({
    required String email,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(email, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_auth_response,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointRegisterConstMeta,
        argValues: [email, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointRegisterConstMeta => const TaskConstMeta(
    debugName: "register",
    argNames: ["email", "password"],
  );

  @override
  Future<bool> crateApiEndpointSetApiUrl({required String url}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointSetApiUrlConstMeta,
        argValues: [url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointSetApiUrlConstMeta =>
      const TaskConstMeta(debugName: "set_api_url", argNames: ["url"]);

  @override
  Future<void> crateApiEndpointSetFlutterLogCallback({
    required FnLevelStringMessageString callback,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
            callback,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointSetFlutterLogCallbackConstMeta,
        argValues: [callback],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointSetFlutterLogCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "set_flutter_log_callback",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiEndpointSetupLoggingBridge({
    required String logLevel,
    String? logFilePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(logLevel, serializer);
          sse_encode_opt_String(logFilePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointSetupLoggingBridgeConstMeta,
        argValues: [logLevel, logFilePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointSetupLoggingBridgeConstMeta =>
      const TaskConstMeta(
        debugName: "setup_logging_bridge",
        argNames: ["logLevel", "logFilePath"],
      );

  @override
  Future<void> crateApiEndpointTestRustLogging() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointTestRustLoggingConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointTestRustLoggingConstMeta =>
      const TaskConstMeta(debugName: "test_rust_logging", argNames: []);

  @override
  Future<Attachment?> crateApiEndpointUpdateAttachment({
    required String attachmentId,
    String? filename,
    String? url,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(attachmentId, serializer);
          sse_encode_opt_String(filename, serializer);
          sse_encode_opt_String(url, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_attachment,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateAttachmentConstMeta,
        argValues: [attachmentId, filename, url],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "update_attachment",
        argNames: ["attachmentId", "filename", "url"],
      );

  @override
  Future<Note?> crateApiEndpointUpdateNote({
    required String noteId,
    String? title,
    String? content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_opt_String(title, serializer);
          sse_encode_opt_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateNoteConstMeta,
        argValues: [noteId, title, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateNoteConstMeta => const TaskConstMeta(
    debugName: "update_note",
    argNames: ["noteId", "title", "content"],
  );

  @override
  Future<NoteSettings?> crateApiEndpointUpdateNoteSettings({
    required String settingsId,
    String? color,
    String? font,
    String? viewMode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(settingsId, serializer);
          sse_encode_opt_String(color, serializer);
          sse_encode_opt_String(font, serializer);
          sse_encode_opt_String(viewMode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_note_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateNoteSettingsConstMeta,
        argValues: [settingsId, color, font, viewMode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateNoteSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "update_note_settings",
        argNames: ["settingsId", "color", "font", "viewMode"],
      );

  @override
  Future<Notebook?> crateApiEndpointUpdateNotebook({
    required String notebookId,
    String? name,
    String? parentId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(notebookId, serializer);
          sse_encode_opt_String(name, serializer);
          sse_encode_opt_String(parentId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_notebook,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateNotebookConstMeta,
        argValues: [notebookId, name, parentId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateNotebookConstMeta =>
      const TaskConstMeta(
        debugName: "update_notebook",
        argNames: ["notebookId", "name", "parentId"],
      );

  @override
  Future<Reminder?> crateApiEndpointUpdateReminder({
    required String reminderId,
    bool? isDone,
    PlatformInt64? remindAt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(reminderId, serializer);
          sse_encode_opt_box_autoadd_bool(isDone, serializer);
          sse_encode_opt_box_autoadd_i_64(remindAt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_reminder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateReminderConstMeta,
        argValues: [reminderId, isDone, remindAt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateReminderConstMeta =>
      const TaskConstMeta(
        debugName: "update_reminder",
        argNames: ["reminderId", "isDone", "remindAt"],
      );

  @override
  Future<SharedNote?> crateApiEndpointUpdateSharedNote({
    required String noteId,
    required String userId,
    required String role,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(noteId, serializer);
          sse_encode_String(userId, serializer);
          sse_encode_String(role, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_shared_note,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateSharedNoteConstMeta,
        argValues: [noteId, userId, role],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateSharedNoteConstMeta =>
      const TaskConstMeta(
        debugName: "update_shared_note",
        argNames: ["noteId", "userId", "role"],
      );

  @override
  Future<UserSettings?> crateApiEndpointUpdateUserSettings({
    required String settingsId,
    String? lang,
    String? theme,
    String? timezone,
    bool? notificationsEnabled,
    String? defaultSort,
    String? editorMode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(settingsId, serializer);
          sse_encode_opt_String(lang, serializer);
          sse_encode_opt_String(theme, serializer);
          sse_encode_opt_String(timezone, serializer);
          sse_encode_opt_box_autoadd_bool(notificationsEnabled, serializer);
          sse_encode_opt_String(defaultSort, serializer);
          sse_encode_opt_String(editorMode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_user_settings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointUpdateUserSettingsConstMeta,
        argValues: [
          settingsId,
          lang,
          theme,
          timezone,
          notificationsEnabled,
          defaultSort,
          editorMode,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointUpdateUserSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "update_user_settings",
        argNames: [
          "settingsId",
          "lang",
          "theme",
          "timezone",
          "notificationsEnabled",
          "defaultSort",
          "editorMode",
        ],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FnLevelStringMessageString =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FnLevelStringMessageString =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString;

  @protected
  FnLevelStringMessageString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FnLevelStringMessageStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FnLevelStringMessageString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FnLevelStringMessageStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Attachment dco_decode_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Attachment(
      id: dco_decode_String(arr[0]),
      noteId: dco_decode_String(arr[1]),
      filename: dco_decode_String(arr[2]),
      url: dco_decode_String(arr[3]),
      createdAt: dco_decode_i_64(arr[4]),
    );
  }

  @protected
  AuthResponse dco_decode_auth_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AuthResponse(
      success: dco_decode_bool(arr[0]),
      message: dco_decode_String(arr[1]),
      token: dco_decode_String(arr[2]),
      refreshToken: dco_decode_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Attachment dco_decode_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attachment(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  Note dco_decode_box_autoadd_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note(raw);
  }

  @protected
  NoteSettings dco_decode_box_autoadd_note_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_settings(raw);
  }

  @protected
  Notebook dco_decode_box_autoadd_notebook(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_notebook(raw);
  }

  @protected
  Reminder dco_decode_box_autoadd_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reminder(raw);
  }

  @protected
  SharedNote dco_decode_box_autoadd_shared_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_shared_note(raw);
  }

  @protected
  UserSettings dco_decode_box_autoadd_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_settings(raw);
  }

  @protected
  CheckApiResult dco_decode_check_api_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CheckApiResult(
      success: dco_decode_bool(arr[0]),
      statusCode: dco_decode_i_32(arr[1]),
      message: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Attachment> dco_decode_list_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_attachment).toList();
  }

  @protected
  List<Note> dco_decode_list_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_note).toList();
  }

  @protected
  List<NoteSettings> dco_decode_list_note_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_note_settings).toList();
  }

  @protected
  List<Notebook> dco_decode_list_notebook(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_notebook).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Reminder> dco_decode_list_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_reminder).toList();
  }

  @protected
  List<SharedNote> dco_decode_list_shared_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_shared_note).toList();
  }

  @protected
  Note dco_decode_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Note(
      id: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      notebookId: dco_decode_opt_String(arr[2]),
      title: dco_decode_String(arr[3]),
      content: dco_decode_String(arr[4]),
      isArchived: dco_decode_bool(arr[5]),
      isPinned: dco_decode_bool(arr[6]),
      tags: dco_decode_String(arr[7]),
      createdAt: dco_decode_i_64(arr[8]),
      updatedAt: dco_decode_i_64(arr[9]),
    );
  }

  @protected
  NoteSettings dco_decode_note_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return NoteSettings(
      id: dco_decode_String(arr[0]),
      noteId: dco_decode_String(arr[1]),
      color: dco_decode_String(arr[2]),
      font: dco_decode_String(arr[3]),
      viewMode: dco_decode_String(arr[4]),
      createdAt: dco_decode_i_64(arr[5]),
      updatedAt: dco_decode_i_64(arr[6]),
    );
  }

  @protected
  Notebook dco_decode_notebook(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Notebook(
      id: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      parentId: dco_decode_opt_String(arr[3]),
      createdAt: dco_decode_i_64(arr[4]),
      updatedAt: dco_decode_i_64(arr[5]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Attachment? dco_decode_opt_box_autoadd_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attachment(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  Note? dco_decode_opt_box_autoadd_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_note(raw);
  }

  @protected
  NoteSettings? dco_decode_opt_box_autoadd_note_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_note_settings(raw);
  }

  @protected
  Notebook? dco_decode_opt_box_autoadd_notebook(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_notebook(raw);
  }

  @protected
  Reminder? dco_decode_opt_box_autoadd_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_reminder(raw);
  }

  @protected
  SharedNote? dco_decode_opt_box_autoadd_shared_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_shared_note(raw);
  }

  @protected
  UserSettings? dco_decode_opt_box_autoadd_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_user_settings(raw);
  }

  @protected
  Reminder dco_decode_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Reminder(
      id: dco_decode_String(arr[0]),
      noteId: dco_decode_String(arr[1]),
      remindAt: dco_decode_i_64(arr[2]),
      isDone: dco_decode_bool(arr[3]),
      createdAt: dco_decode_i_64(arr[4]),
      updatedAt: dco_decode_i_64(arr[5]),
    );
  }

  @protected
  SharedNote dco_decode_shared_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SharedNote(
      userId: dco_decode_String(arr[0]),
      noteId: dco_decode_String(arr[1]),
      role: dco_decode_String(arr[2]),
      grantedAt: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserSettings dco_decode_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return UserSettings(
      id: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      lang: dco_decode_String(arr[2]),
      theme: dco_decode_String(arr[3]),
      timezone: dco_decode_String(arr[4]),
      notificationsEnabled: dco_decode_bool(arr[5]),
      defaultSort: dco_decode_String(arr[6]),
      editorMode: dco_decode_String(arr[7]),
      createdAt: dco_decode_i_64(arr[8]),
      updatedAt: dco_decode_i_64(arr[9]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  FnLevelStringMessageString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FnLevelStringMessageStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FnLevelStringMessageString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FnLevelStringMessageStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Attachment sse_decode_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_noteId = sse_decode_String(deserializer);
    var var_filename = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    return Attachment(
      id: var_id,
      noteId: var_noteId,
      filename: var_filename,
      url: var_url,
      createdAt: var_createdAt,
    );
  }

  @protected
  AuthResponse sse_decode_auth_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_success = sse_decode_bool(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_token = sse_decode_String(deserializer);
    var var_refreshToken = sse_decode_String(deserializer);
    return AuthResponse(
      success: var_success,
      message: var_message,
      token: var_token,
      refreshToken: var_refreshToken,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Attachment sse_decode_box_autoadd_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attachment(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  Note sse_decode_box_autoadd_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note(deserializer));
  }

  @protected
  NoteSettings sse_decode_box_autoadd_note_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_settings(deserializer));
  }

  @protected
  Notebook sse_decode_box_autoadd_notebook(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_notebook(deserializer));
  }

  @protected
  Reminder sse_decode_box_autoadd_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reminder(deserializer));
  }

  @protected
  SharedNote sse_decode_box_autoadd_shared_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_shared_note(deserializer));
  }

  @protected
  UserSettings sse_decode_box_autoadd_user_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_settings(deserializer));
  }

  @protected
  CheckApiResult sse_decode_check_api_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_success = sse_decode_bool(deserializer);
    var var_statusCode = sse_decode_i_32(deserializer);
    var var_message = sse_decode_String(deserializer);
    return CheckApiResult(
      success: var_success,
      statusCode: var_statusCode,
      message: var_message,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Attachment> sse_decode_list_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Attachment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attachment(deserializer));
    }
    return ans_;
  }

  @protected
  List<Note> sse_decode_list_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Note>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_note(deserializer));
    }
    return ans_;
  }

  @protected
  List<NoteSettings> sse_decode_list_note_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NoteSettings>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_note_settings(deserializer));
    }
    return ans_;
  }

  @protected
  List<Notebook> sse_decode_list_notebook(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Notebook>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_notebook(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Reminder> sse_decode_list_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Reminder>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_reminder(deserializer));
    }
    return ans_;
  }

  @protected
  List<SharedNote> sse_decode_list_shared_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SharedNote>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_shared_note(deserializer));
    }
    return ans_;
  }

  @protected
  Note sse_decode_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_notebookId = sse_decode_opt_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_isArchived = sse_decode_bool(deserializer);
    var var_isPinned = sse_decode_bool(deserializer);
    var var_tags = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_updatedAt = sse_decode_i_64(deserializer);
    return Note(
      id: var_id,
      userId: var_userId,
      notebookId: var_notebookId,
      title: var_title,
      content: var_content,
      isArchived: var_isArchived,
      isPinned: var_isPinned,
      tags: var_tags,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  NoteSettings sse_decode_note_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_noteId = sse_decode_String(deserializer);
    var var_color = sse_decode_String(deserializer);
    var var_font = sse_decode_String(deserializer);
    var var_viewMode = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_updatedAt = sse_decode_i_64(deserializer);
    return NoteSettings(
      id: var_id,
      noteId: var_noteId,
      color: var_color,
      font: var_font,
      viewMode: var_viewMode,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  Notebook sse_decode_notebook(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_parentId = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_updatedAt = sse_decode_i_64(deserializer);
    return Notebook(
      id: var_id,
      userId: var_userId,
      name: var_name,
      parentId: var_parentId,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Attachment? sse_decode_opt_box_autoadd_attachment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attachment(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Note? sse_decode_opt_box_autoadd_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_note(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NoteSettings? sse_decode_opt_box_autoadd_note_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_note_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Notebook? sse_decode_opt_box_autoadd_notebook(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_notebook(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Reminder? sse_decode_opt_box_autoadd_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_reminder(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SharedNote? sse_decode_opt_box_autoadd_shared_note(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_shared_note(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UserSettings? sse_decode_opt_box_autoadd_user_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_user_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Reminder sse_decode_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_noteId = sse_decode_String(deserializer);
    var var_remindAt = sse_decode_i_64(deserializer);
    var var_isDone = sse_decode_bool(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_updatedAt = sse_decode_i_64(deserializer);
    return Reminder(
      id: var_id,
      noteId: var_noteId,
      remindAt: var_remindAt,
      isDone: var_isDone,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  SharedNote sse_decode_shared_note(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_noteId = sse_decode_String(deserializer);
    var var_role = sse_decode_String(deserializer);
    var var_grantedAt = sse_decode_i_64(deserializer);
    return SharedNote(
      userId: var_userId,
      noteId: var_noteId,
      role: var_role,
      grantedAt: var_grantedAt,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserSettings sse_decode_user_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_lang = sse_decode_String(deserializer);
    var var_theme = sse_decode_String(deserializer);
    var var_timezone = sse_decode_String(deserializer);
    var var_notificationsEnabled = sse_decode_bool(deserializer);
    var var_defaultSort = sse_decode_String(deserializer);
    var var_editorMode = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_updatedAt = sse_decode_i_64(deserializer);
    return UserSettings(
      id: var_id,
      userId: var_userId,
      lang: var_lang,
      theme: var_theme,
      timezone: var_timezone,
      notificationsEnabled: var_notificationsEnabled,
      defaultSort: var_defaultSort,
      editorMode: var_editorMode,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    FnLevelStringMessageString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FnLevelStringMessageStringImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerfnlevelStringmessageString(
    FnLevelStringMessageString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FnLevelStringMessageStringImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_attachment(Attachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.noteId, serializer);
    sse_encode_String(self.filename, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_i_64(self.createdAt, serializer);
  }

  @protected
  void sse_encode_auth_response(AuthResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.success, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.token, serializer);
    sse_encode_String(self.refreshToken, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_attachment(
    Attachment self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
    PlatformInt64 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note(Note self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_settings(
    NoteSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_notebook(
    Notebook self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_notebook(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_reminder(
    Reminder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reminder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_shared_note(
    SharedNote self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_shared_note(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_settings(
    UserSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_settings(self, serializer);
  }

  @protected
  void sse_encode_check_api_result(
    CheckApiResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.success, serializer);
    sse_encode_i_32(self.statusCode, serializer);
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_attachment(
    List<Attachment> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attachment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_note(List<Note> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_note(item, serializer);
    }
  }

  @protected
  void sse_encode_list_note_settings(
    List<NoteSettings> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_note_settings(item, serializer);
    }
  }

  @protected
  void sse_encode_list_notebook(List<Notebook> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_notebook(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_reminder(List<Reminder> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_reminder(item, serializer);
    }
  }

  @protected
  void sse_encode_list_shared_note(
    List<SharedNote> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_shared_note(item, serializer);
    }
  }

  @protected
  void sse_encode_note(Note self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_opt_String(self.notebookId, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_bool(self.isArchived, serializer);
    sse_encode_bool(self.isPinned, serializer);
    sse_encode_String(self.tags, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_i_64(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_note_settings(NoteSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.noteId, serializer);
    sse_encode_String(self.color, serializer);
    sse_encode_String(self.font, serializer);
    sse_encode_String(self.viewMode, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_i_64(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_notebook(Notebook self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.parentId, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_i_64(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attachment(
    Attachment? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attachment(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
    PlatformInt64? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_note(Note? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_note(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_note_settings(
    NoteSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_note_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_notebook(
    Notebook? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_notebook(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_reminder(
    Reminder? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_reminder(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_shared_note(
    SharedNote? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_shared_note(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_user_settings(
    UserSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_user_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_reminder(Reminder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.noteId, serializer);
    sse_encode_i_64(self.remindAt, serializer);
    sse_encode_bool(self.isDone, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_i_64(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_shared_note(SharedNote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.noteId, serializer);
    sse_encode_String(self.role, serializer);
    sse_encode_i_64(self.grantedAt, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_settings(UserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.lang, serializer);
    sse_encode_String(self.theme, serializer);
    sse_encode_String(self.timezone, serializer);
    sse_encode_bool(self.notificationsEnabled, serializer);
    sse_encode_String(self.defaultSort, serializer);
    sse_encode_String(self.editorMode, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_i_64(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class FnLevelStringMessageStringImpl extends RustOpaque
    implements FnLevelStringMessageString {
  // Not to be used by end users
  FnLevelStringMessageStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FnLevelStringMessageStringImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FnLevelStringMessageString,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FnLevelStringMessageString,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FnLevelStringMessageStringPtr,
  );
}
